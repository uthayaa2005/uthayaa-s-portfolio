"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var project_astro_files_exports = {};
__export(project_astro_files_exports, {
  ProjectAstroFilesManager: () => ProjectAstroFilesManager
});
module.exports = __toCommonJS(project_astro_files_exports);
var import_utils = require("./utils");
const _ProjectAstroFilesManager = class {
  constructor(typescript, project, serverHost, snapshotManager, parsedCommandLine) {
    this.typescript = typescript;
    this.project = project;
    this.serverHost = serverHost;
    this.snapshotManager = snapshotManager;
    this.parsedCommandLine = parsedCommandLine;
    this.files = /* @__PURE__ */ new Set();
    this.directoryWatchers = /* @__PURE__ */ new Set();
    this.setupWatchers();
    this.updateProjectAstroFiles();
    _ProjectAstroFilesManager.instances.set(project.getProjectName(), this);
  }
  static getInstance(projectName) {
    return this.instances.get(projectName);
  }
  updateProjectConfig(serviceHost) {
    var _a;
    const parsedCommandLine = (_a = serviceHost.getParsedCommandLine) == null ? void 0 : _a.call(serviceHost, (0, import_utils.getConfigPathForProject)(this.project));
    if (!parsedCommandLine) {
      return;
    }
    this.disposeWatchersAndFiles();
    this.parsedCommandLine = parsedCommandLine;
    this.setupWatchers();
    this.updateProjectAstroFiles();
  }
  getFiles() {
    return Array.from(this.files);
  }
  setupWatchers() {
    for (const directory in this.parsedCommandLine.wildcardDirectories) {
      if (!Object.prototype.hasOwnProperty.call(this.parsedCommandLine.wildcardDirectories, directory)) {
        continue;
      }
      const watchDirectoryFlags = this.parsedCommandLine.wildcardDirectories[directory];
      const watcher = this.serverHost.watchDirectory(
        directory,
        this.watcherCallback.bind(this),
        watchDirectoryFlags === this.typescript.WatchDirectoryFlags.Recursive,
        this.parsedCommandLine.watchOptions
      );
      this.directoryWatchers.add(watcher);
    }
  }
  watcherCallback(fileName) {
    if (!(0, import_utils.isAstroFilePath)(fileName)) {
      return;
    }
    this.updateProjectAstroFiles();
  }
  updateProjectAstroFiles() {
    const fileNamesAfter = (0, import_utils.readProjectAstroFilesFromFs)(this.typescript, this.project, this.parsedCommandLine);
    const removedFiles = new Set(...this.files);
    const newFiles = fileNamesAfter.filter((fileName) => {
      const has = this.files.has(fileName);
      if (has) {
        removedFiles.delete(fileName);
      }
      return !has;
    });
    for (const newFile of newFiles) {
      this.addFileToProject(newFile);
      this.files.add(newFile);
    }
    for (const removedFile of removedFiles) {
      this.removeFileFromProject(removedFile, false);
      this.files.delete(removedFile);
    }
  }
  addFileToProject(newFile) {
    this.snapshotManager.create(newFile);
    const snapshot = this.project.projectService.getScriptInfo(newFile);
    if (snapshot) {
      this.project.addRoot(snapshot);
    }
  }
  removeFileFromProject(file, exists = true) {
    const info = this.project.getScriptInfo(file);
    if (info) {
      this.project.removeFile(info, exists, true);
    }
  }
  disposeWatchersAndFiles() {
    this.directoryWatchers.forEach((watcher) => watcher.close());
    this.directoryWatchers.clear();
    this.files.forEach((file) => this.removeFileFromProject(file));
    this.files.clear();
  }
  dispose() {
    this.disposeWatchersAndFiles();
    _ProjectAstroFilesManager.instances.delete(this.project.getProjectName());
  }
};
let ProjectAstroFilesManager = _ProjectAstroFilesManager;
ProjectAstroFilesManager.instances = /* @__PURE__ */ new Map();
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ProjectAstroFilesManager
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL3Byb2plY3QtYXN0cm8tZmlsZXMudHMiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUEsbUJBQXNGO0FBRS9FLE1BQU0sNEJBQU4sTUFBK0I7QUFBQSxFQVVyQyxZQUNrQixZQUNBLFNBQ0EsWUFDQSxpQkFDVCxtQkFDUDtBQUxnQjtBQUNBO0FBQ0E7QUFDQTtBQUNUO0FBZFQsU0FBUSxRQUFRLG9CQUFJLElBQVk7QUFDaEMsU0FBUSxvQkFBb0Isb0JBQUksSUFBb0I7QUFlbkQsU0FBSyxjQUFjO0FBQ25CLFNBQUssd0JBQXdCO0FBRTdCLDhCQUF5QixVQUFVLElBQUksUUFBUSxlQUFlLEdBQUcsSUFBSTtBQUFBLEVBQ3RFO0FBQUEsRUFmQSxPQUFPLFlBQVksYUFBcUI7QUFDdkMsV0FBTyxLQUFLLFVBQVUsSUFBSSxXQUFXO0FBQUEsRUFDdEM7QUFBQSxFQWVBLG9CQUFvQixhQUFxQztBQTNCMUQ7QUE0QkUsVUFBTSxxQkFBb0IsaUJBQVkseUJBQVoseUNBQW1DLHNDQUF3QixLQUFLLE9BQU87QUFFakcsUUFBSSxDQUFDLG1CQUFtQjtBQUN2QjtBQUFBLElBQ0Q7QUFFQSxTQUFLLHdCQUF3QjtBQUM3QixTQUFLLG9CQUFvQjtBQUN6QixTQUFLLGNBQWM7QUFDbkIsU0FBSyx3QkFBd0I7QUFBQSxFQUM5QjtBQUFBLEVBRUEsV0FBVztBQUNWLFdBQU8sTUFBTSxLQUFLLEtBQUssS0FBSztBQUFBLEVBQzdCO0FBQUEsRUFPUSxnQkFBZ0I7QUFDdkIsZUFBVyxhQUFhLEtBQUssa0JBQWtCLHFCQUFxQjtBQUNuRSxVQUFJLENBQUMsT0FBTyxVQUFVLGVBQWUsS0FBSyxLQUFLLGtCQUFrQixxQkFBcUIsU0FBUyxHQUFHO0FBQ2pHO0FBQUEsTUFDRDtBQUVBLFlBQU0sc0JBQXNCLEtBQUssa0JBQWtCLG9CQUFvQjtBQUN2RSxZQUFNLFVBQVUsS0FBSyxXQUFXO0FBQUEsUUFDL0I7QUFBQSxRQUNBLEtBQUssZ0JBQWdCLEtBQUssSUFBSTtBQUFBLFFBQzlCLHdCQUF3QixLQUFLLFdBQVcsb0JBQW9CO0FBQUEsUUFDNUQsS0FBSyxrQkFBa0I7QUFBQSxNQUN4QjtBQUVBLFdBQUssa0JBQWtCLElBQUksT0FBTztBQUFBLElBQ25DO0FBQUEsRUFDRDtBQUFBLEVBRVEsZ0JBQWdCLFVBQWtCO0FBQ3pDLFFBQUksS0FBQyw4QkFBZ0IsUUFBUSxHQUFHO0FBQy9CO0FBQUEsSUFDRDtBQUtBLFNBQUssd0JBQXdCO0FBQUEsRUFDOUI7QUFBQSxFQUVRLDBCQUEwQjtBQUNqQyxVQUFNLHFCQUFpQiwwQ0FBNEIsS0FBSyxZQUFZLEtBQUssU0FBUyxLQUFLLGlCQUFpQjtBQUN4RyxVQUFNLGVBQWUsSUFBSSxJQUFJLEdBQUcsS0FBSyxLQUFLO0FBQzFDLFVBQU0sV0FBVyxlQUFlLE9BQU8sQ0FBQyxhQUFhO0FBQ3BELFlBQU0sTUFBTSxLQUFLLE1BQU0sSUFBSSxRQUFRO0FBQ25DLFVBQUksS0FBSztBQUNSLHFCQUFhLE9BQU8sUUFBUTtBQUFBLE1BQzdCO0FBQ0EsYUFBTyxDQUFDO0FBQUEsSUFDVCxDQUFDO0FBRUQsZUFBVyxXQUFXLFVBQVU7QUFDL0IsV0FBSyxpQkFBaUIsT0FBTztBQUM3QixXQUFLLE1BQU0sSUFBSSxPQUFPO0FBQUEsSUFDdkI7QUFDQSxlQUFXLGVBQWUsY0FBYztBQUN2QyxXQUFLLHNCQUFzQixhQUFhLEtBQUs7QUFDN0MsV0FBSyxNQUFNLE9BQU8sV0FBVztBQUFBLElBQzlCO0FBQUEsRUFDRDtBQUFBLEVBRVEsaUJBQWlCLFNBQWlCO0FBQ3pDLFNBQUssZ0JBQWdCLE9BQU8sT0FBTztBQUNuQyxVQUFNLFdBQVcsS0FBSyxRQUFRLGVBQWUsY0FBYyxPQUFPO0FBRWxFLFFBQUksVUFBVTtBQUNiLFdBQUssUUFBUSxRQUFRLFFBQVE7QUFBQSxJQUM5QjtBQUFBLEVBQ0Q7QUFBQSxFQUVRLHNCQUFzQixNQUFjLFNBQVMsTUFBTTtBQUMxRCxVQUFNLE9BQU8sS0FBSyxRQUFRLGNBQWMsSUFBSTtBQUU1QyxRQUFJLE1BQU07QUFDVCxXQUFLLFFBQVEsV0FBVyxNQUFNLFFBQVEsSUFBSTtBQUFBLElBQzNDO0FBQUEsRUFDRDtBQUFBLEVBRVEsMEJBQTBCO0FBQ2pDLFNBQUssa0JBQWtCLFFBQVEsQ0FBQyxZQUFZLFFBQVEsTUFBTSxDQUFDO0FBQzNELFNBQUssa0JBQWtCLE1BQU07QUFFN0IsU0FBSyxNQUFNLFFBQVEsQ0FBQyxTQUFTLEtBQUssc0JBQXNCLElBQUksQ0FBQztBQUM3RCxTQUFLLE1BQU0sTUFBTTtBQUFBLEVBQ2xCO0FBQUEsRUFFQSxVQUFVO0FBQ1QsU0FBSyx3QkFBd0I7QUFFN0IsOEJBQXlCLFVBQVUsT0FBTyxLQUFLLFFBQVEsZUFBZSxDQUFDO0FBQUEsRUFDeEU7QUFDRDtBQTdITyxJQUFNLDJCQUFOO0FBQU0seUJBSUcsWUFBWSxvQkFBSSxJQUFzQzsiLAogICJuYW1lcyI6IFtdCn0K
