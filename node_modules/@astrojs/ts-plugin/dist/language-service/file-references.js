"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var file_references_exports = {};
__export(file_references_exports, {
  decorateGetFileReferences: () => decorateGetFileReferences
});
module.exports = __toCommonJS(file_references_exports);
var import_utils = require("../utils.js");
function decorateGetFileReferences(ls, snapshotManager) {
  const getFileReferences = ls.getFileReferences;
  ls.getFileReferences = (fileName) => {
    const references = getFileReferences(fileName);
    return references == null ? void 0 : references.map((ref) => {
      var _a;
      if (!(0, import_utils.isAstroFilePath)(ref.fileName)) {
        return ref;
      }
      const textSpan = (_a = snapshotManager.get(ref.fileName)) == null ? void 0 : _a.getOriginalTextSpan(ref.textSpan);
      if (!textSpan) {
        return void 0;
      }
      return {
        ...ref,
        textSpan,
        contextSpan: void 0,
        originalTextSpan: void 0,
        originalContextSpan: void 0
      };
    }).filter(import_utils.isNotNullOrUndefined);
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decorateGetFileReferences
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2xhbmd1YWdlLXNlcnZpY2UvZmlsZS1yZWZlcmVuY2VzLnRzIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBLG1CQUFzRDtBQUUvQyxTQUFTLDBCQUEwQixJQUF3QixpQkFBNkM7QUFDOUcsUUFBTSxvQkFBb0IsR0FBRztBQUM3QixLQUFHLG9CQUFvQixDQUFDLGFBQWE7QUFDcEMsVUFBTSxhQUFhLGtCQUFrQixRQUFRO0FBQzdDLFdBQU8seUNBQ0osSUFBSSxDQUFDLFFBQVE7QUFUbEI7QUFVSSxVQUFJLEtBQUMsOEJBQWdCLElBQUksUUFBUSxHQUFHO0FBQ25DLGVBQU87QUFBQSxNQUNSO0FBRUEsWUFBTSxZQUFXLHFCQUFnQixJQUFJLElBQUksUUFBUSxNQUFoQyxtQkFBbUMsb0JBQW9CLElBQUk7QUFDNUUsVUFBSSxDQUFDLFVBQVU7QUFDZCxlQUFPO0FBQUEsTUFDUjtBQUVBLGFBQU87QUFBQSxRQUNOLEdBQUc7QUFBQSxRQUNIO0FBQUEsUUFFQSxhQUFhO0FBQUEsUUFDYixrQkFBa0I7QUFBQSxRQUNsQixxQkFBcUI7QUFBQSxNQUN0QjtBQUFBLElBQ0QsR0FDQyxPQUFPO0FBQUEsRUFDVjtBQUNEOyIsCiAgIm5hbWVzIjogW10KfQo=
