"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var find_references_exports = {};
__export(find_references_exports, {
  decorateFindReferences: () => decorateFindReferences
});
module.exports = __toCommonJS(find_references_exports);
var import_utils = require("../utils.js");
function decorateFindReferences(ls, snapshotManager, logger) {
  decorateGetReferencesAtPosition(ls, snapshotManager, logger);
  _decorateFindReferences(ls, snapshotManager, logger);
}
function _decorateFindReferences(ls, snapshotManager, logger) {
  const findReferences = ls.findReferences;
  ls.findReferences = (fileName, position) => {
    const references = findReferences(fileName, position);
    return references == null ? void 0 : references.map((reference) => {
      const snapshot = snapshotManager.get(reference.definition.fileName);
      if (!(0, import_utils.isAstroFilePath)(reference.definition.fileName) || !snapshot) {
        return reference;
      }
      const textSpan = snapshot.getOriginalTextSpan(reference.definition.textSpan);
      if (!textSpan) {
        return null;
      }
      return {
        definition: {
          ...reference.definition,
          textSpan,
          originalTextSpan: void 0
        },
        references: mapReferences(reference.references, snapshotManager, logger)
      };
    }).filter(import_utils.isNotNullOrUndefined);
  };
}
function decorateGetReferencesAtPosition(ls, snapshotManager, logger) {
  const getReferencesAtPosition = ls.getReferencesAtPosition;
  ls.getReferencesAtPosition = (fileName, position) => {
    const references = getReferencesAtPosition(fileName, position);
    return references && mapReferences(references, snapshotManager, logger);
  };
}
function mapReferences(references, snapshotManager, logger) {
  return references.map((reference) => {
    const snapshot = snapshotManager.get(reference.fileName);
    if (!(0, import_utils.isAstroFilePath)(reference.fileName) || !snapshot) {
      return reference;
    }
    const textSpan = snapshot.getOriginalTextSpan(reference.textSpan);
    if (!textSpan) {
      return null;
    }
    logger.debug("Find references; map textSpan: changed", reference.textSpan, "to", textSpan);
    return {
      ...reference,
      textSpan,
      contextSpan: void 0,
      originalTextSpan: void 0,
      originalContextSpan: void 0
    };
  }).filter(import_utils.isNotNullOrUndefined);
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  decorateFindReferences
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vc3JjL2xhbmd1YWdlLXNlcnZpY2UvZmluZC1yZWZlcmVuY2VzLnRzIl0sCiAgIm1hcHBpbmdzIjogIjs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUdBLG1CQUFzRDtBQUUvQyxTQUFTLHVCQUNmLElBQ0EsaUJBQ0EsUUFDTztBQUNQLGtDQUFnQyxJQUFJLGlCQUFpQixNQUFNO0FBQzNELDBCQUF3QixJQUFJLGlCQUFpQixNQUFNO0FBQ3BEO0FBRUEsU0FBUyx3QkFBd0IsSUFBd0IsaUJBQXVDLFFBQWdCO0FBQy9HLFFBQU0saUJBQWlCLEdBQUc7QUFDMUIsS0FBRyxpQkFBaUIsQ0FBQyxVQUFVLGFBQWE7QUFDM0MsVUFBTSxhQUFhLGVBQWUsVUFBVSxRQUFRO0FBQ3BELFdBQU8seUNBQ0osSUFBSSxDQUFDLGNBQWM7QUFDcEIsWUFBTSxXQUFXLGdCQUFnQixJQUFJLFVBQVUsV0FBVyxRQUFRO0FBQ2xFLFVBQUksS0FBQyw4QkFBZ0IsVUFBVSxXQUFXLFFBQVEsS0FBSyxDQUFDLFVBQVU7QUFDakUsZUFBTztBQUFBLE1BQ1I7QUFFQSxZQUFNLFdBQVcsU0FBUyxvQkFBb0IsVUFBVSxXQUFXLFFBQVE7QUFDM0UsVUFBSSxDQUFDLFVBQVU7QUFDZCxlQUFPO0FBQUEsTUFDUjtBQUVBLGFBQU87QUFBQSxRQUNOLFlBQVk7QUFBQSxVQUNYLEdBQUcsVUFBVTtBQUFBLFVBQ2I7QUFBQSxVQUVBLGtCQUFrQjtBQUFBLFFBQ25CO0FBQUEsUUFDQSxZQUFZLGNBQWMsVUFBVSxZQUFZLGlCQUFpQixNQUFNO0FBQUEsTUFDeEU7QUFBQSxJQUNELEdBQ0MsT0FBTztBQUFBLEVBQ1Y7QUFDRDtBQUVBLFNBQVMsZ0NBQ1IsSUFDQSxpQkFDQSxRQUNDO0FBQ0QsUUFBTSwwQkFBMEIsR0FBRztBQUNuQyxLQUFHLDBCQUEwQixDQUFDLFVBQVUsYUFBYTtBQUNwRCxVQUFNLGFBQWEsd0JBQXdCLFVBQVUsUUFBUTtBQUM3RCxXQUFPLGNBQWMsY0FBYyxZQUFZLGlCQUFpQixNQUFNO0FBQUEsRUFDdkU7QUFDRDtBQUVBLFNBQVMsY0FDUixZQUNBLGlCQUNBLFFBQ3NCO0FBQ3RCLFNBQU8sV0FDTCxJQUFJLENBQUMsY0FBYztBQUNuQixVQUFNLFdBQVcsZ0JBQWdCLElBQUksVUFBVSxRQUFRO0FBQ3ZELFFBQUksS0FBQyw4QkFBZ0IsVUFBVSxRQUFRLEtBQUssQ0FBQyxVQUFVO0FBQ3RELGFBQU87QUFBQSxJQUNSO0FBRUEsVUFBTSxXQUFXLFNBQVMsb0JBQW9CLFVBQVUsUUFBUTtBQUNoRSxRQUFJLENBQUMsVUFBVTtBQUNkLGFBQU87QUFBQSxJQUNSO0FBRUEsV0FBTyxNQUFNLDBDQUEwQyxVQUFVLFVBQVUsTUFBTSxRQUFRO0FBRXpGLFdBQU87QUFBQSxNQUNOLEdBQUc7QUFBQSxNQUNIO0FBQUEsTUFFQSxhQUFhO0FBQUEsTUFDYixrQkFBa0I7QUFBQSxNQUNsQixxQkFBcUI7QUFBQSxJQUN0QjtBQUFBLEVBQ0QsQ0FBQyxFQUNBLE9BQU8saUNBQW9CO0FBQzlCOyIsCiAgIm5hbWVzIjogW10KfQo=
