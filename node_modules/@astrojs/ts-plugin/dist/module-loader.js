"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var module_loader_exports = {};
__export(module_loader_exports, {
  patchModuleLoader: () => patchModuleLoader
});
module.exports = __toCommonJS(module_loader_exports);
var import_astro_sys = require("./astro-sys.js");
var import_utils = require("./utils.js");
class ModuleResolutionCache {
  constructor() {
    this.cache = /* @__PURE__ */ new Map();
  }
  get(moduleName, containingFile) {
    return this.cache.get(this.getKey(moduleName, containingFile));
  }
  set(moduleName, containingFile, resolvedModule) {
    if (!resolvedModule) {
      return;
    }
    this.cache.set(this.getKey(moduleName, containingFile), resolvedModule);
  }
  delete(resolvedModuleName) {
    this.cache.forEach((val, key) => {
      if (val.resolvedFileName === resolvedModuleName) {
        this.cache.delete(key);
      }
    });
  }
  getKey(moduleName, containingFile) {
    return containingFile + ":::" + (0, import_utils.ensureRealAstroFilePath)(moduleName);
  }
}
function patchModuleLoader(logger, snapshotManager, typescript, lsHost, project) {
  var _a;
  const astroSys = (0, import_astro_sys.createAstroSys)(logger);
  const moduleCache = new ModuleResolutionCache();
  const origResolveModuleNames = (_a = lsHost.resolveModuleNames) == null ? void 0 : _a.bind(lsHost);
  lsHost.resolveModuleNames = resolveModuleNames;
  const origRemoveFile = project.removeFile.bind(project);
  project.removeFile = (info, fileExists, detachFromProject) => {
    logger.log("File is being removed. Delete from cache: ", info.fileName);
    moduleCache.delete(info.fileName);
    return origRemoveFile(info, fileExists, detachFromProject);
  };
  const origReadDirectory = project.readDirectory.bind(project);
  project.readDirectory = (path, extensions, exclude, include, depth) => {
    const extensionsWithAstro = (extensions != null ? extensions : []).concat(".astro", ".md", ".mdx");
    return origReadDirectory(path, extensionsWithAstro, exclude, include, depth);
  };
  function resolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, compilerOptions) {
    const resolved = (origResolveModuleNames == null ? void 0 : origResolveModuleNames(moduleNames, containingFile, reusedNames, redirectedReference, compilerOptions)) || Array.from(Array(moduleNames.length));
    return resolved.map((moduleName, idx) => {
      const fileName = moduleNames[idx];
      if (moduleName || !(0, import_utils.ensureRealAstroFilePath)(fileName).endsWith(".astro")) {
        return moduleName;
      }
      const cachedModule = moduleCache.get(fileName, containingFile);
      if (cachedModule) {
        return cachedModule;
      }
      const resolvedModule = resolveModuleName(fileName, containingFile, compilerOptions);
      moduleCache.set(fileName, containingFile, resolvedModule);
      return resolvedModule;
    });
  }
  function resolveModuleName(name, containingFile, compilerOptions) {
    const astroResolvedModule = typescript.resolveModuleName(
      name,
      containingFile,
      compilerOptions,
      astroSys
    ).resolvedModule;
    if (!astroResolvedModule || !(0, import_utils.isVirtualAstroFilePath)(astroResolvedModule.resolvedFileName)) {
      return astroResolvedModule;
    }
    const resolvedFileName = (0, import_utils.ensureRealAstroFilePath)(astroResolvedModule.resolvedFileName);
    logger.log("Resolved", name, "to astro file", resolvedFileName);
    const snapshot = snapshotManager.create(resolvedFileName);
    if (!snapshot) {
      return void 0;
    }
    const resolvedAstroModule = {
      extension: typescript.Extension.Tsx,
      resolvedFileName
    };
    return resolvedAstroModule;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  patchModuleLoader
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL21vZHVsZS1sb2FkZXIudHMiXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBRUEsdUJBQStCO0FBRS9CLG1CQUFnRTtBQUtoRSxNQUFNLHNCQUFzQjtBQUFBLEVBQTVCO0FBQ0MsU0FBUSxRQUFRLG9CQUFJLElBQStCO0FBQUE7QUFBQSxFQUtuRCxJQUFJLFlBQW9CLGdCQUF1RDtBQUM5RSxXQUFPLEtBQUssTUFBTSxJQUFJLEtBQUssT0FBTyxZQUFZLGNBQWMsQ0FBQztBQUFBLEVBQzlEO0FBQUEsRUFLQSxJQUFJLFlBQW9CLGdCQUF3QixnQkFBK0M7QUFDOUYsUUFBSSxDQUFDLGdCQUFnQjtBQUNwQjtBQUFBLElBQ0Q7QUFDQSxTQUFLLE1BQU0sSUFBSSxLQUFLLE9BQU8sWUFBWSxjQUFjLEdBQUcsY0FBYztBQUFBLEVBQ3ZFO0FBQUEsRUFNQSxPQUFPLG9CQUFrQztBQUN4QyxTQUFLLE1BQU0sUUFBUSxDQUFDLEtBQUssUUFBUTtBQUNoQyxVQUFJLElBQUkscUJBQXFCLG9CQUFvQjtBQUNoRCxhQUFLLE1BQU0sT0FBTyxHQUFHO0FBQUEsTUFDdEI7QUFBQSxJQUNELENBQUM7QUFBQSxFQUNGO0FBQUEsRUFFUSxPQUFPLFlBQW9CLGdCQUF3QjtBQUMxRCxXQUFPLGlCQUFpQixZQUFRLHNDQUF3QixVQUFVO0FBQUEsRUFDbkU7QUFDRDtBQVdPLFNBQVMsa0JBQ2YsUUFDQSxpQkFDQSxZQUNBLFFBQ0EsU0FDTztBQTdEUjtBQThEQyxRQUFNLGVBQVcsaUNBQWUsTUFBTTtBQUN0QyxRQUFNLGNBQWMsSUFBSSxzQkFBc0I7QUFDOUMsUUFBTSwwQkFBeUIsWUFBTyx1QkFBUCxtQkFBMkIsS0FBSztBQUUvRCxTQUFPLHFCQUFxQjtBQUU1QixRQUFNLGlCQUFpQixRQUFRLFdBQVcsS0FBSyxPQUFPO0FBQ3RELFVBQVEsYUFBYSxDQUFDLE1BQU0sWUFBWSxzQkFBc0I7QUFDN0QsV0FBTyxJQUFJLDhDQUE4QyxLQUFLLFFBQVE7QUFDdEUsZ0JBQVksT0FBTyxLQUFLLFFBQVE7QUFDaEMsV0FBTyxlQUFlLE1BQU0sWUFBWSxpQkFBaUI7QUFBQSxFQUMxRDtBQUdBLFFBQU0sb0JBQW9CLFFBQVEsY0FBYyxLQUFLLE9BQU87QUFDNUQsVUFBUSxnQkFBZ0IsQ0FBQyxNQUFNLFlBQVksU0FBUyxTQUFTLFVBQVU7QUFDdEUsVUFBTSx1QkFBdUIsa0NBQWMsQ0FBQyxHQUFHLE9BQU8sVUFBVSxPQUFPLE1BQU07QUFDN0UsV0FBTyxrQkFBa0IsTUFBTSxxQkFBcUIsU0FBUyxTQUFTLEtBQUs7QUFBQSxFQUM1RTtBQUVBLFdBQVMsbUJBQ1IsYUFDQSxnQkFDQSxhQUNBLHFCQUNBLGlCQUN1QztBQU92QyxVQUFNLFlBQ0wsaUVBQXlCLGFBQWEsZ0JBQWdCLGFBQWEscUJBQXFCLHFCQUN4RixNQUFNLEtBQWdCLE1BQU0sWUFBWSxNQUFNLENBQUM7QUFFaEQsV0FBTyxTQUFTLElBQUksQ0FBQyxZQUFZLFFBQVE7QUFDeEMsWUFBTSxXQUFXLFlBQVk7QUFDN0IsVUFBSSxjQUFjLEtBQUMsc0NBQXdCLFFBQVEsRUFBRSxTQUFTLFFBQVEsR0FBRztBQUN4RSxlQUFPO0FBQUEsTUFDUjtBQUVBLFlBQU0sZUFBZSxZQUFZLElBQUksVUFBVSxjQUFjO0FBQzdELFVBQUksY0FBYztBQUNqQixlQUFPO0FBQUEsTUFDUjtBQUVBLFlBQU0saUJBQWlCLGtCQUFrQixVQUFVLGdCQUFnQixlQUFlO0FBQ2xGLGtCQUFZLElBQUksVUFBVSxnQkFBZ0IsY0FBYztBQUN4RCxhQUFPO0FBQUEsSUFDUixDQUFDO0FBQUEsRUFDRjtBQUVBLFdBQVMsa0JBQ1IsTUFDQSxnQkFDQSxpQkFDZ0M7QUFDaEMsVUFBTSxzQkFBc0IsV0FBVztBQUFBLE1BQ3RDO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsSUFDRCxFQUFFO0FBQ0YsUUFBSSxDQUFDLHVCQUF1QixLQUFDLHFDQUF1QixvQkFBb0IsZ0JBQWdCLEdBQUc7QUFDMUYsYUFBTztBQUFBLElBQ1I7QUFFQSxVQUFNLHVCQUFtQixzQ0FBd0Isb0JBQW9CLGdCQUFnQjtBQUNyRixXQUFPLElBQUksWUFBWSxNQUFNLGlCQUFpQixnQkFBZ0I7QUFDOUQsVUFBTSxXQUFXLGdCQUFnQixPQUFPLGdCQUFnQjtBQUN4RCxRQUFJLENBQUMsVUFBVTtBQUNkLGFBQU87QUFBQSxJQUNSO0FBRUEsVUFBTSxzQkFBNkM7QUFBQSxNQUNsRCxXQUFXLFdBQVcsVUFBVTtBQUFBLE1BQ2hDO0FBQUEsSUFDRDtBQUNBLFdBQU87QUFBQSxFQUNSO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
