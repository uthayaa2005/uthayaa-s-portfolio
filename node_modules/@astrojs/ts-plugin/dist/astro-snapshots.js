"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var astro_snapshots_exports = {};
__export(astro_snapshots_exports, {
  AstroSnapshot: () => AstroSnapshot,
  AstroSnapshotManager: () => AstroSnapshotManager
});
module.exports = __toCommonJS(astro_snapshots_exports);
var import_trace_mapping = require("@jridgewell/trace-mapping");
var import_astro2tsx = require("./astro2tsx.js");
var import_utils = require("./utils.js");
class AstroSnapshot {
  constructor(typescript, fileName, astroCode, traceMap, logger) {
    this.typescript = typescript;
    this.fileName = fileName;
    this.astroCode = astroCode;
    this.traceMap = traceMap;
    this.logger = logger;
    this.convertInternalCodePositions = false;
  }
  update(astroCode, traceMap) {
    this.astroCode = astroCode;
    this.traceMap = traceMap;
    this.lineOffsets = void 0;
    this.log("Updated Snapshot");
  }
  getOriginalTextSpan(textSpan) {
    const start = this.getOriginalOffset(textSpan.start);
    if (start === -1) {
      return null;
    }
    return {
      start,
      length: textSpan.length
    };
  }
  getOriginalOffset(generatedOffset) {
    if (!this.scriptInfo) {
      return generatedOffset;
    }
    this.toggleMappingMode(true);
    const lineOffset = this.scriptInfo.positionToLineOffset(generatedOffset);
    this.debug("try convert offset", generatedOffset, "/", lineOffset);
    const original = (0, import_trace_mapping.originalPositionFor)(this.traceMap, {
      line: lineOffset.line,
      column: lineOffset.offset
    });
    this.toggleMappingMode(false);
    if (!original.line) {
      return -1;
    }
    const originalOffset = this.scriptInfo.lineOffsetToPosition(original.line, original.column);
    this.debug("converted offset to", original, "/", originalOffset);
    return originalOffset;
  }
  setAndPatchScriptInfo(scriptInfo) {
    scriptInfo.scriptKind = this.typescript.ScriptKind.TSX;
    const positionToLineOffset = scriptInfo.positionToLineOffset.bind(scriptInfo);
    scriptInfo.positionToLineOffset = (position) => {
      if (this.convertInternalCodePositions) {
        const lineOffset2 = positionToLineOffset(position);
        this.debug("positionToLineOffset for generated code", position, lineOffset2);
        return lineOffset2;
      }
      const lineOffset = this.positionAt(position);
      this.debug("positionToLineOffset for original code", position, lineOffset);
      return { line: lineOffset.line + 1, offset: lineOffset.character + 1 };
    };
    const lineOffsetToPosition = scriptInfo.lineOffsetToPosition.bind(scriptInfo);
    scriptInfo.lineOffsetToPosition = (line, offset) => {
      if (this.convertInternalCodePositions) {
        const position2 = lineOffsetToPosition(line, offset);
        this.debug("lineOffsetToPosition for generated code", { line, offset }, position2);
        return position2;
      }
      const position = this.offsetAt({ line: line - 1, character: offset - 1 });
      this.debug("lineOffsetToPosition for original code", { line, offset }, position);
      return position;
    };
    this.scriptInfo = scriptInfo;
    this.log("patched scriptInfo");
  }
  positionAt(offset) {
    offset = this.clamp(offset, 0, this.astroCode.length);
    const lineOffsets = this.getLineOffsets();
    let low = 0;
    let high = lineOffsets.length;
    if (high === 0) {
      return { line: 0, character: offset };
    }
    while (low < high) {
      const mid = Math.floor((low + high) / 2);
      if (lineOffsets[mid] > offset) {
        high = mid;
      } else {
        low = mid + 1;
      }
    }
    const line = low - 1;
    return { line, character: offset - lineOffsets[line] };
  }
  offsetAt(position) {
    const lineOffsets = this.getLineOffsets();
    if (position.line >= lineOffsets.length) {
      return this.astroCode.length;
    } else if (position.line < 0) {
      return 0;
    }
    const lineOffset = lineOffsets[position.line];
    const nextLineOffset = position.line + 1 < lineOffsets.length ? lineOffsets[position.line + 1] : this.astroCode.length;
    return this.clamp(nextLineOffset, lineOffset, lineOffset + position.character);
  }
  getLineOffsets() {
    if (this.lineOffsets) {
      return this.lineOffsets;
    }
    const lineOffsets = [];
    const text = this.astroCode;
    let isLineStart = true;
    for (let i = 0; i < text.length; i++) {
      if (isLineStart) {
        lineOffsets.push(i);
        isLineStart = false;
      }
      const ch = text.charAt(i);
      isLineStart = ch === "\r" || ch === "\n";
      if (ch === "\r" && i + 1 < text.length && text.charAt(i + 1) === "\n") {
        i++;
      }
    }
    if (isLineStart && text.length > 0) {
      lineOffsets.push(text.length);
    }
    this.lineOffsets = lineOffsets;
    return lineOffsets;
  }
  clamp(num, min, max) {
    return Math.max(min, Math.min(max, num));
  }
  log(...args) {
    this.logger.log("AstroSnapshot:", this.fileName, "-", ...args);
  }
  debug(...args) {
    this.logger.debug("AstroSnapshot:", this.fileName, "-", ...args);
  }
  toggleMappingMode(convertInternalCodePositions) {
    this.convertInternalCodePositions = convertInternalCodePositions;
  }
  getText() {
    var _a;
    const snapshot = (_a = this.scriptInfo) == null ? void 0 : _a.getSnapshot();
    if (!snapshot) {
      return "";
    }
    return snapshot.getText(0, snapshot.getLength());
  }
}
class AstroSnapshotManager {
  constructor(typescript, projectService, logger) {
    this.typescript = typescript;
    this.projectService = projectService;
    this.logger = logger;
    this.snapshots = /* @__PURE__ */ new Map();
    this.patchProjectServiceReadFile();
  }
  get(fileName) {
    return this.snapshots.get(fileName);
  }
  create(fileName) {
    if (this.snapshots.has(fileName)) {
      return this.snapshots.get(fileName);
    }
    const scriptInfo = this.projectService.getOrCreateScriptInfoForNormalizedPath(
      this.typescript.server.toNormalizedPath(fileName),
      false
    );
    if (!scriptInfo) {
      this.logger.log("Was not able get snapshot for", fileName);
      return;
    }
    try {
      scriptInfo.getSnapshot();
    } catch (e) {
      this.logger.log("Loading Snapshot failed", fileName);
    }
    const snapshot = this.snapshots.get(fileName);
    if (!snapshot) {
      this.logger.log("Astro snapshot was not found after trying to load script snapshot for", fileName);
      return;
    }
    snapshot.setAndPatchScriptInfo(scriptInfo);
    this.snapshots.set(fileName, snapshot);
    return snapshot;
  }
  patchProjectServiceReadFile() {
    const readFile = this.projectService.host.readFile;
    this.projectService.host.readFile = (path) => {
      if ((0, import_utils.isAstroFilePath)(path)) {
        this.logger.debug("Read Astro file:", path);
        const astroCode = readFile(path) || "";
        try {
          const result = (0, import_astro2tsx.astro2tsx)(astroCode, path);
          const existingSnapshot = this.snapshots.get(path);
          if (existingSnapshot) {
            existingSnapshot.update(astroCode, new import_trace_mapping.TraceMap(result.map));
          } else {
            this.snapshots.set(
              path,
              new AstroSnapshot(
                this.typescript,
                path,
                astroCode,
                new import_trace_mapping.TraceMap(result.map),
                this.logger
              )
            );
          }
          this.logger.log("Successfully read Astro file contents of", path);
          return result.code;
        } catch (e) {
          this.logger.log("Error loading Astro file:", path);
          this.logger.debug("Error:", e);
        }
      } else {
        return readFile(path);
      }
    };
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  AstroSnapshot,
  AstroSnapshotManager
});
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vc3JjL2FzdHJvLXNuYXBzaG90cy50cyJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLDJCQUFnRTtBQUVoRSx1QkFBMEI7QUFFMUIsbUJBQWdDO0FBRXpCLE1BQU0sY0FBYztBQUFBLEVBSzFCLFlBQ1MsWUFDQSxVQUNBLFdBQ0EsVUFDQSxRQUNQO0FBTE87QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVBULFNBQVEsK0JBQStCO0FBQUEsRUFRcEM7QUFBQSxFQUVILE9BQU8sV0FBbUIsVUFBb0I7QUFDN0MsU0FBSyxZQUFZO0FBQ2pCLFNBQUssV0FBVztBQUNoQixTQUFLLGNBQWM7QUFDbkIsU0FBSyxJQUFJLGtCQUFrQjtBQUFBLEVBQzVCO0FBQUEsRUFFQSxvQkFBb0IsVUFBMkM7QUFDOUQsVUFBTSxRQUFRLEtBQUssa0JBQWtCLFNBQVMsS0FBSztBQUNuRCxRQUFJLFVBQVUsSUFBSTtBQUNqQixhQUFPO0FBQUEsSUFDUjtBQUdBLFdBQU87QUFBQSxNQUNOO0FBQUEsTUFDQSxRQUFRLFNBQVM7QUFBQSxJQUNsQjtBQUFBLEVBQ0Q7QUFBQSxFQUVBLGtCQUFrQixpQkFBeUI7QUFDMUMsUUFBSSxDQUFDLEtBQUssWUFBWTtBQUNyQixhQUFPO0FBQUEsSUFDUjtBQUVBLFNBQUssa0JBQWtCLElBQUk7QUFDM0IsVUFBTSxhQUFhLEtBQUssV0FBVyxxQkFBcUIsZUFBZTtBQUN2RSxTQUFLLE1BQU0sc0JBQXNCLGlCQUFpQixLQUFLLFVBQVU7QUFDakUsVUFBTSxlQUFXLDBDQUFvQixLQUFLLFVBQVU7QUFBQSxNQUNuRCxNQUFNLFdBQVc7QUFBQSxNQUNqQixRQUFRLFdBQVc7QUFBQSxJQUNwQixDQUFDO0FBQ0QsU0FBSyxrQkFBa0IsS0FBSztBQUU1QixRQUFJLENBQUMsU0FBUyxNQUFNO0FBQ25CLGFBQU87QUFBQSxJQUNSO0FBRUEsVUFBTSxpQkFBaUIsS0FBSyxX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RUEsT0FBTyxVQUE2QztBQUNuRCxRQUFJLEtBQUssVUFBVSxJQUFJLFFBQVEsR0FBRztBQUNqQyxhQUFPLEtBQUssVUFBVSxJQUFJLFFBQVE7QUFBQSxJQUNuQztBQUdBLFVBQU0sYUFBYSxLQUFLLGVBQWU7QUFBQSxNQUN0QyxLQUFLLFdBQVcsT0FBTyxpQkFBaUIsUUFBUTtBQUFBLE1BQ2hEO0FBQUEsSUFDRDtBQUNBLFFBQUksQ0FBQyxZQUFZO0FBQ2hCLFdBQUssT0FBTyxJQUFJLGlDQUFpQyxRQUFRO0FBQ3pEO0FBQUEsSUFDRDtBQUVBLFFBQUk7QUFDSCxpQkFBVyxZQUFZO0FBQUEsSUFDeEIsU0FBUyxHQUFQO0FBQ0QsV0FBSyxPQUFPLElBQUksMkJBQTJCLFFBQVE7QUFBQSxJQUNwRDtBQUNBLFVBQU0sV0FBVyxLQUFLLFVBQVUsSUFBSSxRQUFRO0FBQzVDLFFBQUksQ0FBQyxVQUFVO0FBQ2QsV0FBSyxPQUFPLElBQUkseUVBQXlFLFFBQVE7QUFDakc7QUFBQSxJQUNEO0FBQ0EsYUFBUyxzQkFBc0IsVUFBVTtBQUN6QyxTQUFLLFVBQVUsSUFBSSxVQUFVLFFBQVE7QUFDckMsV0FBTztBQUFBLEVBQ1I7QUFBQSxFQUVRLDhCQUE4QjtBQUNyQyxVQUFNLFdBQVcsS0FBSyxlQUFlLEtBQUs7QUFDMUMsU0FBSyxlQUFlLEtBQUssV0FBVyxDQUFDLFNBQWlCO0FBQ3JELGNBQUksOEJBQWdCLElBQUksR0FBRztBQUMxQixhQUFLLE9BQU8sTUFBTSxvQkFBb0IsSUFBSTtBQUMxQyxjQUFNLFlBQVksU0FBUyxJQUFJLEtBQUs7QUFDcEMsWUFBSTtBQUNILGdCQUFNLGFBQVMsNEJBQVUsV0FBVyxJQUFJO0FBQ3hDLGdCQUFNLG1CQUFtQixLQUFLLFVBQVUsSUFBSSxJQUFJO0FBQ2hELGNBQUksa0JBQWtCO0FBQ3JCLDZCQUFpQixPQUFPLFdBQVcsSUFBSSw4QkFBUyxPQUFPLEdBQXVCLENBQUM7QUFBQSxVQUNoRixPQUFPO0FBQ04saUJBQUssVUFBVTtBQUFBLGNBQ2Q7QUFBQSxjQUNBLElBQUk7QUFBQSxnQkFDSCxLQUFLO0FBQUEsZ0JBQ0w7QUFBQSxnQkFDQTtBQUFBLGdCQUNBLElBQUksOEJBQVMsT0FBTyxHQUF1QjtBQUFBLGdCQUMzQyxLQUFLO0FBQUEsY0FDTjtBQUFBLFlBQ0Q7QUFBQSxVQUNEO0FBQ0EsZUFBSyxPQUFPLElBQUksNENBQTRDLElBQUk7QUFDaEUsaUJBQU8sT0FBTztBQUFBLFFBQ2YsU0FBUyxHQUFQO0FBQ0QsZUFBSyxPQUFPLElBQUksNkJBQTZCLElBQUk7QUFDakQsZUFBSyxPQUFPLE1BQU0sVUFBVSxDQUFDO0FBQUEsUUFDOUI7QUFBQSxNQUNELE9BQU87QUFDTixlQUFPLFNBQVMsSUFBSTtBQUFBLE1BQ3JCO0FBQUEsSUFDRDtBQUFBLEVBQ0Q7QUFDRDsiLAogICJuYW1lcyI6IFsibGluZU9mZnNldCIsICJwb3NpdGlvbiJdCn0K
